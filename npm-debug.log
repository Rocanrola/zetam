0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.9
3 info using node@v0.10.28
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/mzapaia/.npm/3a52ce78-.lock
10 verbose tar pack [ '/var/folders/_j/4v1cfjpd0tx7sv_wr427m8vw0000gn/T/npm-30099-zuo6j8Lg/1408570466758-0.5118543223943561/tmp.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /var/folders/_j/4v1cfjpd0tx7sv_wr427m8vw0000gn/T/npm-30099-zuo6j8Lg/1408570466758-0.5118543223943561/tmp.tgz
12 verbose folder .
13 info prepublish zetam@0.2.41
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/mzapaia/.npm/1f1177db-tar.lock
16 silly lockFile 87eca904-66758-0-5118543223943561-tmp-tgz tar:///var/folders/_j/4v1cfjpd0tx7sv_wr427m8vw0000gn/T/npm-30099-zuo6j8Lg/1408570466758-0.5118543223943561/tmp.tgz
17 verbose lock tar:///var/folders/_j/4v1cfjpd0tx7sv_wr427m8vw0000gn/T/npm-30099-zuo6j8Lg/1408570466758-0.5118543223943561/tmp.tgz /Users/mzapaia/.npm/87eca904-66758-0-5118543223943561-tmp-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 87eca904-66758-0-5118543223943561-tmp-tgz tar:///var/folders/_j/4v1cfjpd0tx7sv_wr427m8vw0000gn/T/npm-30099-zuo6j8Lg/1408570466758-0.5118543223943561/tmp.tgz
21 silly lockFile 87eca904-66758-0-5118543223943561-tmp-tgz tar:///var/folders/_j/4v1cfjpd0tx7sv_wr427m8vw0000gn/T/npm-30099-zuo6j8Lg/1408570466758-0.5118543223943561/tmp.tgz
22 verbose tar unpack /var/folders/_j/4v1cfjpd0tx7sv_wr427m8vw0000gn/T/npm-30099-zuo6j8Lg/1408570466758-0.5118543223943561/tmp.tgz
23 silly lockFile 327f369d-mzapaia-npm-zetam-0-2-41-package tar:///Users/mzapaia/.npm/zetam/0.2.41/package
24 verbose lock tar:///Users/mzapaia/.npm/zetam/0.2.41/package /Users/mzapaia/.npm/327f369d-mzapaia-npm-zetam-0-2-41-package.lock
25 silly lockFile 87eca904-66758-0-5118543223943561-tmp-tgz tar:///var/folders/_j/4v1cfjpd0tx7sv_wr427m8vw0000gn/T/npm-30099-zuo6j8Lg/1408570466758-0.5118543223943561/tmp.tgz
26 verbose lock tar:///var/folders/_j/4v1cfjpd0tx7sv_wr427m8vw0000gn/T/npm-30099-zuo6j8Lg/1408570466758-0.5118543223943561/tmp.tgz /Users/mzapaia/.npm/87eca904-66758-0-5118543223943561-tmp-tgz.lock
27 silly gunzTarPerm modes [ '755', '644' ]
28 silly gunzTarPerm extractEntry package.json
29 silly gunzTarPerm extractEntry .npmignore
30 silly gunzTarPerm extractEntry README.md
31 silly gunzTarPerm extractEntry LICENSE
32 silly gunzTarPerm extractEntry component.js
33 silly gunzTarPerm extractEntry page.js
34 silly gunzTarPerm extractEntry gulp.js
35 silly gunzTarPerm extractEntry index.js
36 silly gunzTarPerm extractEntry load.js
37 silly gunzTarPerm extractEntry middleware.js
38 silly gunzTarPerm extractEntry utils.js
39 silly gunzTarPerm extractEntry module.js
40 silly gunzTarPerm extractEntry package.json.orig
41 silly gunzTarPerm extractEntry controllers/components.js
42 silly gunzTarPerm extractEntry pages/components/controller.js
43 silly gunzTarPerm extractEntry pages/components/i18n.json
44 silly gunzTarPerm extractEntry pages/components/template.html
45 silly gunzTarPerm extractEntry pull.sh
46 silly gunzTarPerm extractEntry push.sh
47 silly lockFile 327f369d-mzapaia-npm-zetam-0-2-41-package tar:///Users/mzapaia/.npm/zetam/0.2.41/package
48 silly lockFile 327f369d-mzapaia-npm-zetam-0-2-41-package tar:///Users/mzapaia/.npm/zetam/0.2.41/package
49 silly lockFile 87eca904-66758-0-5118543223943561-tmp-tgz tar:///var/folders/_j/4v1cfjpd0tx7sv_wr427m8vw0000gn/T/npm-30099-zuo6j8Lg/1408570466758-0.5118543223943561/tmp.tgz
50 silly lockFile 87eca904-66758-0-5118543223943561-tmp-tgz tar:///var/folders/_j/4v1cfjpd0tx7sv_wr427m8vw0000gn/T/npm-30099-zuo6j8Lg/1408570466758-0.5118543223943561/tmp.tgz
51 silly lockFile 3a52ce78- .
52 silly lockFile 3a52ce78- .
53 silly publish { name: 'zetam',
53 silly publish   description: '(In progress)',
53 silly publish   version: '0.2.41',
53 silly publish   engines: { node: '>0.10.1' },
53 silly publish   author: { name: 'Marcelo Zapaia' },
53 silly publish   repository: { type: 'git', url: 'https://github.com/qzapaia/zetam.git' },
53 silly publish   keywords: [ 'express', 'web', 'framework', 'zeta' ],
53 silly publish   main: 'index.js',
53 silly publish   license: 'ISC',
53 silly publish   dependencies:
53 silly publish    { async: '^0.9.0',
53 silly publish      cheerio: '^0.17.0',
53 silly publish      gulp: '^3.8.5',
53 silly publish      'gulp-autoprefixer': '0.0.8',
53 silly publish      'gulp-browserify': '^0.5.0',
53 silly publish      'gulp-less': '^1.2.4',
53 silly publish      'gulp-livereload': '^2.1.0',
53 silly publish      'gulp-load-plugins': '^0.5.3',
53 silly publish      'gulp-nodemon': '^1.0.4',
53 silly publish      'gulp-plumber': '^0.6.3',
53 silly publish      'gulp-rename': '^1.2.0',
53 silly publish      'gulp-watch': '^0.6.8',
53 silly publish      'html-minifier': '^0.6.5',
53 silly publish      mustache: '^0.8.2' },
53 silly publish   readmeFilename: 'README.md',
53 silly publish   readme: 'Zetam\n-----\nZetam is a middleware for express that makes frontend development easy. It\'s based on two basic concepts: Pages and Components\n\nInstall\n-----------\n\n```sh\nnpm install zetam\n```\nPlug the middleware in your app.\n\n```js\nvar z = require(\'zetam\');\nvar express = require(\'express\');\nvar app = new express();\n\napp.use(function(req,res,next){\n    req.config.locale = \'es\';\n    next();\n});\n\n// set \'public\' static folder\napp.use(express.static(__dirname + \'/public\'));\n\n// the potato\napp.use(z.middleware);\n\napp.listen(3000,function () {\n    console.log(\'running on port \' + port);\n});\n```\nReady ! Start to create Pages and Components.\n\nPages & Components\n-------------\nPages and components are pretty similar. The main difference is the use of each. Pages should have minimum amount of business logic and are pretty much a layout to hold components. Components, in the other side, are ideal to reusable pieces with logic and many templates.\n\nPages\n-------------\nPages are the initial logic piece for every URL. Each one has it own templates, server and client side logic. \n\nExample page directory structure:\n\n - **project**\n     - app.js\n     - **pages**\n         - **example**\n             - controller.js\n             - i18n.json (optional)\n             - template.html\n             - bundle.less\n             - view.js\n\nIn order to see **example** Page, browse http://localhost:3000/example\n\n```js\n//project/pages/example/controller.js\n// In this case the request is a GET request \n// so, Zetam will load get method from Controller\n\nexports.get = function (conf,cb) {\n    // conf: has globals object (req.config), and resource object (pathname)\n    // both comes from the middleware.\n    \n    // cb: callback function. It receives two parameters: \n    // error and model object (plain object to be passed to the template)\n    \n    console.log(conf);\n    console.log(conf.globals); // this comes from req.cofig\n    console.log(conf.resource); // this represents the URL\n    \n    var model = {\n        title:\'page title\'\n    }\n    \n    cb(null,model)\n}\n```\n\n```js\n//project/pages/example/i18n.json\n\n// Zetam will merge this two objects based on \n// req.config.locale value ("es" for this example)\n\n{\n    "all": {\n        "greetings": "Howdy stranger !",\n        "bye": "Bye bye !!! Please come back",\n    },\n    "es": {\n        "greetings": "Hola !!"\n    }\n}\n\n```\n```css\n//project/pages/example/bundle.less\n\n// has page LESS styles, and also import \n// all the components LESS stylesheets used on the page. \n// It\'s automatically compiled to public directory \n// (public/css/pages/example.css) if you use zetam.gulp task.\n\n@import "components/signup/styles";\n@import "less/globals/colors";\n\nbody{\n    background-color:@mainColor;\n    font-family: sans-serif;\n    \n    header {\n        height: 6rem;\n        margin: auto;\n    }\n}\n```\n\n```html\n<!--project/pages/example/template.html-->\n\n<!DOCTYPE html>\n<html lang="es">\n<head>\n    <link rel="stylesheet" href="/css/pages/example.css">\n    <title>{{model.title}}</title>\n    <!-- model object comes from controller reponse -->\n</head>\n<body data-country="{{i18n.locale}}">\n    <header>\n        <h1>\n           {{i18n.greetings}}\n           <!-- This will print "Hola !!" -->\n        </h1>\n        <h2></h2>\n    </header>\n    \n    <div data-component="coolComponent" data-param="Apple rocks"></div>\n    <!-- This inject the coolComponent component (see Components section) -->\n    \n    <footer>\n        {{i18n.bye}}\n        <!-- This will print "Bye bye !!! Please come back" -->\n    </footer>\n\n    <script src="/js/pages/example.js"></script>\n</body>\n</html>\n```\n```js\n// project/pages/example/view.js\n\n// It\'s a browserify module, so you can import and use node modules. \n// Also it is helpfull to import component view logic. \n// it\'s also compiled by the zetam.gulp task into the public directory\n// (public/js/pages/example.js).\n\n// importing coolComponent client side logic\nvar signup = require(\'../../components/coolComponent/view\');\n\n\n// page client side logic\ndocument.getElementsByTagName(\'h2\')[0].innerText = (\'how you doing?\');\n\n// if you are using zetam-client module to create Components \n// client side logic, this is necessary\nvar z = require(\'zetam-client\');\nz.initDomComponents();\n```\nComponents\n-------------\nComponents are pieces with it\'s own server and client side logic, templates, styles and i18n. \n\nIt\'s possible preview a component using the special **component** controller (it comes with Zetam)\n\n\nhttp://localhost:3000/components/coolComponent?preview=true\n\n\n\nExample component directory structure:\n\n - **project**\n     - app.js\n     - **components**\n         - **coolComponent**\n             - controller.js\n             - i18n.json (optional)\n             - template.html\n             - bundle.less\n             - view.js\n\n\n```js\n//project/components/coolComponent/controller.js\n\nexports.init = function (conf,cb) {\n    // conf: has globals object (req.config) and\n    // all the attributes in the html tag\n    \n    // cb: callback function. It receives two parameters: \n    // error and model object (plain object to be passed to the template)\n    \n    console.log(conf);\n    console.log(conf.globals); // this comes from req.cofig\n    console.log(conf[\'data-param\']); // this comes from the html tag\n    \n    var model = {\n        text:conf[\'data-param\']\n    }\n    \n    cb(null,model)\n}\n```\n\n```js\n//project/components/coolComponent/i18n.json\n\n// Zetam will merge this object (all and es)  on \n// req.config.locale value ("es" for this example)\n\n{\n    "all": {\n        "hey": "Hey you !"\n    },\n    "es": {\n        "hey": "Hola !"\n    }\n}\n\n```\n```css\n//project/components/coolComponent/bundle.less\n\n// has page LESS styles\n// It\'s automatically compiled to public directory \n// (public/css/pages/coolComponent.css) if you use zetam.gulp task.\n\n\n[data-component=coolComponent]{\n    height: 50px;\n    padding: 1px;\n    background-color: blue;\n    border:solid 2px red;\n    \n    button.main{\n        background-color: white;\n        padding:20px;\n    }\n}\n\n```\n\n```html\n<!--project/components/coolComponent/template.html-->\n<span>{{i18n.hey}}</span> <strong> {{model.text }}</strong>\n<button class="main">Message</button>\n```\n```js\n// project/components/coolComponent/view.js\n\n// It\'s a browserify module, so you can import and use node modules. \n// it\'s also compiled by the zetam.gulp task into the public directory\n// (public/js/components/coolComponent.js).\n// it\'s highly recommended use zetam-client module\n// https://www.npmjs.org/package/zetam-client\n\nvar z = require(\'zetam-client\');\n\nz.registerComponent({\n    name:\'coolComponent\', \n    init:function () {\n        this.bindEvent(\'button.main\',\'click\',\'showMessage\')\n    },\n    showMessage:function(){\n        alert(\'Message\');\n    }\n})\n\n// This register a new componen but not create an instance.\n// In order to create an instance an link the instance with the \n// dom element is necessary run z.initDomComponents();\n// it\'s recommended run this command from the Page view.js\n// because it has to be run once, when the dom is ready.\n```\n\n Using Components\n-------------\n\nIn order to insert a component in a Page an HTML tag. Components can only be embedded from Pages like this:\n\n```html\n<div data-component="coolComponent"></div>\n```\n Al the attributes added to the tag are passed to the Component controller in the first parameter.\n\n ```html \n<div data-component="coolComponent" data-param="Apple rocks"></div>\n```\n\nThe **data-template**  modify which template file will be used.\n\n```html\n<div data-component="coolComponent" data-param="Apple rocks" data-template="small"></div>\n```\n\nSays to zetam: use **small.html** file instead the default **template.html**\n\nComponents special controller\n-------------\n\nZetam includes an special controller named **components** it allow execute components in different ways.\n\n\n    /components/coolComponent?data-template=small&data-param=Apple rocks\n\nExecute the component in the same way that HTML tag does, this is very useful for ajax. This doesn\'t include CSS or client side Javascript.\n\n    /components/coolComponent?preview=true\n\nExecute the component in a Page context and include CSS and client side logic (view.js), it\'s very useful in development.\n\n    /components/coolComponent/method/someMethod?text=Hi%20there\n\n    /components/coolComponent/method/someMethod?jsonString={text:\'Hi there\'}\n    \nExecute some method exported from the component controller (like init). This can receive regular query parameters, or an special jsonString parameter that tells to Zetam automatically parse that string and take it like params. This last option is useful for complex JSON trees. \n\nMiddleware\n-------------\n\n```js\n// app.js\nvar z = require(\'zetam\');\nvar express = require(\'express\');\nvar app = new express();\n\napp.use(function(req,res,next){\n    // this is needed for i18n\n    req.config.locale = \'es\';\n    req.config.siteName = \'Example Website\';\n    next();\n});\n\n// set \'public\' static folder\napp.use(express.static(__dirname + \'/public\'));\n\n// the potato\napp.use(z.middleware);\n\napp.listen(3000,function () {\n    console.log(\'running on port \' + port);\n});\n```\n\nMiddlware has several functions. The most important: routing.\n\nExample:\n```sh\nGET http://localhost:3000/myFirstPage\n```\nWill load **myFirstPage** page and execute **get** method (see https://github.com/qzapaia/zetam#pages).\n\n\nAlso, the middleware will transform all the pathname into an **resource** object that is passed to the page controller.\n\n```sh\nPOST http://localhost:3000/user/9876/post/1234\n```\nWill load **user** page, and execute **post** method (from the controller). This is how the **resource** would looks like.\n\n```js\n{ \n    name: \'user\',\n    id: \'9876\',\n    subresource: { \n        name: \'post\', \n        id: \'1234\' \n    } \n}\n```\n\n\nconf.globals\n----------\nAll Pages and Components receive a **conf** (first) parameter in the controller. This is a copy of req.config and also includes the **globals** object with some helpful resources:\n\n - **resource** : Object that represent the current URL\n - **cookies** : Cookies from the request\n - **query** : Query object from the URL\n\nreq.config\n----------\n\n```js\n// app.js\nvar z = require(\'zetam\');\nvar express = require(\'express\');\nvar app = new express();\n\napp.use(function(req,res,next){\n    // this is needed for i18n\n    req.config = {\n        locale:\'es\',\n        siteName:\'mySite\'\n    }\n    next();\n});\n\n// set \'public\' static folder\napp.use(express.static(__dirname + \'/public\'));\n\n// the potato\napp.use(z.middleware);\n\napp.listen(3000,function () {\n    console.log(\'running on port \' + port);\n});\n```\n\nreq.config object is the way to send data to all pages and components. For example **req.config.locale** is used to choice the language and render i18n.json objects inside templates. Also all the req.config is passed to the pages and components controllers like the **globals** object.\n\n## Gulp support ##\n\nZetam has a helper that automatically compile JS and CSS into the **public** directory:\n\n```js\n// gulpfile.js (example)\nvar gulp = require(\'gulp\');\nvar z = require(\'zetam\');\n\n// this creates a zetam task\nz.gulp(gulp);\n\n// set the zetam task as the default\ngulp.task(\'default\', [\'zetam\']);\n```\n\n\nQuick look (example project)\n--------------------\n\n - **project** (main dir)\n     - app.js (has Express app and setup zetam middleware)\n     - **components**\n         - **header**\n             - controller.js - (server-side logic, create model for the template)\n             - i18n.js - (has i18n texts)\n             - template.html - (default template file, it render model that comes from the controller and i18n)\n             - styles.less - (has css for the component)\n             - view.js - (browserify module, clientside logic)\n     - **pages**\n         - **index** (home page)\n             - controller.js - (server side logic and model setup)\n             - i18n.js - (has i18n texts)\n             - template.html - (default template file, it render model that comes from the controller and i18n)\n             - bundle.less - (has css for the page and call all the components less stylesheets)\n             - view.js - (has the page client-side logic and call all the view.js files from components an initialize these)\n     - **public** (statics folder)\n         - **css**\n             - **components**\n                 - header.css - (compiled css from the component, is used to preview)\n             - **pages**\n                 - index.css - (compiled from bundle.less it\'s used from the index template)\n         - **js**\n             - **components**\n                 - header.js - (compiled js from the component, is used to preview)\n             - **pages**\n                 - index.js - (compiled from view.js it\'s used from the index template it has all the client-side logix for the page. including components initialization)\n         - gulpfile.js - (it use the zetam.gulp process in order to generate static assets (js and css))',
53 silly publish   bugs: { url: 'https://github.com/qzapaia/zetam/issues' },
53 silly publish   homepage: 'https://github.com/qzapaia/zetam',
53 silly publish   _id: 'zetam@0.2.41',
53 silly publish   _shasum: '362dda7b68610cc131137e3b25223599a62b87b6',
53 silly publish   _from: '.' }
54 verbose url raw zetam
55 verbose url resolving [ 'https://registry.npmjs.org/', './zetam' ]
56 verbose url resolved https://registry.npmjs.org/zetam
57 info trying registry request attempt 1 at 18:34:26
58 http PUT https://registry.npmjs.org/zetam
59 http 403 https://registry.npmjs.org/zetam
60 verbose headers { date: 'Wed, 20 Aug 2014 21:34:29 GMT',
60 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
60 verbose headers   'content-type': 'application/json',
60 verbose headers   'cache-control': 'max-age=60',
60 verbose headers   'content-length': '18623',
60 verbose headers   'accept-ranges': 'bytes',
60 verbose headers   via: '1.1 varnish',
60 verbose headers   'x-served-by': 'cache-iad2130-IAD',
60 verbose headers   'x-cache': 'MISS',
60 verbose headers   'x-cache-hits': '0',
60 verbose headers   'x-timer': 'S1408570468.562987,VS0,VE472',
60 verbose headers   'keep-alive': 'timeout=10, max=50',
60 verbose headers   connection: 'Keep-Alive' }
61 error publish Failed PUT 403
62 error Error: forbidden cannot modify pre-existing version: 0.2.41
62 error old={"name":"zetam","description":"(In progress)","version":"0.2.41","engines":{"node":">0.10.1"},"author":{"name":"Marcelo Zapaia"},"repository":{"type":"git","url":"https://github.com/qzapaia/zetam.git"},"keywords":["express","web","framework","zeta"],"main":"index.js","license":"ISC","dependencies":{"async":"^0.9.0","cheerio":"^0.17.0","gulp":"^3.8.5","gulp-autoprefixer":"0.0.8","gulp-browserify":"^0.5.0","gulp-less":"^1.2.4","gulp-livereload":"^2.1.0","gulp-load-plugins":"^0.5.3","gulp-nodemon":"^1.0.4","gulp-plumber":"^0.6.3","gulp-rename":"^1.2.0","gulp-watch":"^0.6.8","html-minifier":"^0.6.5","mustache":"^0.8.2"},"bugs":{"url":"https://github.com/qzapaia/zetam/issues"},"homepage":"https://github.com/qzapaia/zetam","_id":"zetam@0.2.41","_shasum":"937d96bb1eae5e05aeeaf5bb20a1e99fd25516ea","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"qzapaia","email":"qzapaia@gmail.com"},"maintainers":[{"name":"qzapaia","email":"qzapaia@gmail.com"}],"dist":{"shasum":"937d96bb1eae5e05aeeaf5bb20a1e99fd25516ea","tarball":"http://registry.npmjs.org/zetam/-/zetam-0.2.41.tgz"}}
62 error new={"name":"zetam","description":"(In progress)","version":"0.2.41","engines":{"node":">0.10.1"},"author":{"name":"Marcelo Zapaia"},"repository":{"type":"git","url":"https://github.com/qzapaia/zetam.git"},"keywords":["express","web","framework","zeta"],"main":"index.js","license":"ISC","dependencies":{"async":"^0.9.0","cheerio":"^0.17.0","gulp":"^3.8.5","gulp-autoprefixer":"0.0.8","gulp-browserify":"^0.5.0","gulp-less":"^1.2.4","gulp-livereload":"^2.1.0","gulp-load-plugins":"^0.5.3","gulp-nodemon":"^1.0.4","gulp-plumber":"^0.6.3","gulp-rename":"^1.2.0","gulp-watch":"^0.6.8","html-minifier":"^0.6.5","mustache":"^0.8.2"},"readmeFilename":"README.md","readme":"Zetam\u000a-----\u000aZetam is a middleware for express that makes frontend development easy. It's based on two basic concepts: Pages and Components\u000a\u000aInstall\u000a-----------\u000a\u000a```sh\u000anpm install zetam\u000a```\u000aPlug the middleware in your app.\u000a\u000a```js\u000avar z = require('zetam');\u000avar express = require('express');\u000avar app = new express();\u000a\u000aapp.use(function(req,res,next){\u000a    req.config.locale = 'es';\u000a    next();\u000a});\u000a\u000a// set 'public' static folder\u000aapp.use(express.static(__dirname + '/public'));\u000a\u000a// the potato\u000aapp.use(z.middleware);\u000a\u000aapp.listen(3000,function () {\u000a    console.log('running on port ' + port);\u000a});\u000a```\u000aReady ! Start to create Pages and Components.\u000a\u000aPages & Components\u000a-------------\u000aPages and components are pretty similar. The main difference is the use of each. Pages should have minimum amount of business logic and are pretty much a layout to hold components. Components, in the other side, are ideal to reusable pieces with logic and many templates.\u000a\u000aPages\u000a-------------\u000aPages are the initial logic piece for every URL. Each one has it own templates, server and client side logic. \u000a\u000aExample page directory structure:\u000a\u000a - **project**\u000a     - app.js\u000a     - **pages**\u000a         - **example**\u000a             - controller.js\u000a             - i18n.json (optional)\u000a             - template.html\u000a             - bundle.less\u000a             - view.js\u000a\u000aIn order to see **example** Page, browse http://localhost:3000/example\u000a\u000a```js\u000a//project/pages/example/controller.js\u000a// In this case the request is a GET request \u000a// so, Zetam will load get method from Controller\u000a\u000aexports.get = function (conf,cb) {\u000a    // conf: has globals object (req.config), and resource object (pathname)\u000a    // both comes from the middleware.\u000a    \u000a    // cb: callback function. It receives two parameters: \u000a    // error and model object (plain object to be passed to the template)\u000a    \u000a    console.log(conf);\u000a    console.log(conf.globals); // this comes from req.cofig\u000a    console.log(conf.resource); // this represents the URL\u000a    \u000a    var model = {\u000a        title:'page title'\u000a    }\u000a    \u000a    cb(null,model)\u000a}\u000a```\u000a\u000a```js\u000a//project/pages/example/i18n.json\u000a\u000a// Zetam will merge this two objects based on \u000a// req.config.locale value (\"es\" for this example)\u000a\u000a{\u000a    \"all\": {\u000a        \"greetings\": \"Howdy stranger !\",\u000a        \"bye\": \"Bye bye !!! Please come back\",\u000a    },\u000a    \"es\": {\u000a        \"greetings\": \"Hola !!\"\u000a    }\u000a}\u000a\u000a```\u000a```css\u000a//project/pages/example/bundle.less\u000a\u000a// has page LESS styles, and also import \u000a// all the components LESS stylesheets used on the page. \u000a// It's automatically compiled to public directory \u000a// (public/css/pages/example.css) if you use zetam.gulp task.\u000a\u000a@import \"components/signup/styles\";\u000a@import \"less/globals/colors\";\u000a\u000abody{\u000a    background-color:@mainColor;\u000a    font-family: sans-serif;\u000a    \u000a    header {\u000a        height: 6rem;\u000a        margin: auto;\u000a    }\u000a}\u000a```\u000a\u000a```html\u000a<!--project/pages/example/template.html-->\u000a\u000a<!DOCTYPE html>\u000a<html lang=\"es\">\u000a<head>\u000a    <link rel=\"stylesheet\" href=\"/css/pages/example.css\">\u000a    <title>{{model.title}}</title>\u000a    <!-- model object comes from controller reponse -->\u000a</head>\u000a<body data-country=\"{{i18n.locale}}\">\u000a    <header>\u000a        <h1>\u000a           {{i18n.greetings}}\u000a           <!-- This will print \"Hola !!\" -->\u000a        </h1>\u000a        <h2></h2>\u000a    </header>\u000a    \u000a    <div data-component=\"coolComponent\" data-param=\"Apple rocks\"></div>\u000a    <!-- This inject the coolComponent component (see Components section) -->\u000a    \u000a    <footer>\u000a        {{i18n.bye}}\u000a        <!-- This will print \"Bye bye !!! Please come back\" -->\u000a    </footer>\u000a\u000a    <script src=\"/js/pages/example.js\"></script>\u000a</body>\u000a</html>\u000a```\u000a```js\u000a// project/pages/example/view.js\u000a\u000a// It's a browserify module, so you can import and use node modules. \u000a// Also it is helpfull to import component view logic. \u000a// it's also compiled by the zetam.gulp task into the public directory\u000a// (public/js/pages/example.js).\u000a\u000a// importing coolComponent client side logic\u000avar signup = require('../../components/coolComponent/view');\u000a\u000a\u000a// page client side logic\u000adocument.getElementsByTagName('h2')[0].innerText = ('how you doing?');\u000a\u000a// if you are using zetam-client module to create Components \u000a// client side logic, this is necessary\u000avar z = require('zetam-client');\u000az.initDomComponents();\u000a```\u000aComponents\u000a-------------\u000aComponents are pieces with it's own server and client side logic, templates, styles and i18n. \u000a\u000aIt's possible preview a component using the special **component** controller (it comes with Zetam)\u000a\u000a\u000ahttp://localhost:3000/components/coolComponent?preview=true\u000a\u000a\u000a\u000aExample component directory structure:\u000a\u000a - **project**\u000a     - app.js\u000a     - **components**\u000a         - **coolComponent**\u000a             - controller.js\u000a             - i18n.json (optional)\u000a             - template.html\u000a             - bundle.less\u000a             - view.js\u000a\u000a\u000a```js\u000a//project/components/coolComponent/controller.js\u000a\u000aexports.init = function (conf,cb) {\u000a    // conf: has globals object (req.config) and\u000a    // all the attributes in the html tag\u000a    \u000a    // cb: callback function. It receives two parameters: \u000a    // error and model object (plain object to be passed to the template)\u000a    \u000a    console.log(conf);\u000a    console.log(conf.globals); // this comes from req.cofig\u000a    console.log(conf['data-param']); // this comes from the html tag\u000a    \u000a    var model = {\u000a        text:conf['data-param']\u000a    }\u000a    \u000a    cb(null,model)\u000a}\u000a```\u000a\u000a```js\u000a//project/components/coolComponent/i18n.json\u000a\u000a// Zetam will merge this object (all and es)  on \u000a// req.config.locale value (\"es\" for this example)\u000a\u000a{\u000a    \"all\": {\u000a        \"hey\": \"Hey you !\"\u000a    },\u000a    \"es\": {\u000a        \"hey\": \"Hola !\"\u000a    }\u000a}\u000a\u000a```\u000a```css\u000a//project/components/coolComponent/bundle.less\u000a\u000a// has page LESS styles\u000a// It's automatically compiled to public directory \u000a// (public/css/pages/coolComponent.css) if you use zetam.gulp task.\u000a\u000a\u000a[data-component=coolComponent]{\u000a    height: 50px;\u000a    padding: 1px;\u000a    background-color: blue;\u000a    border:solid 2px red;\u000a    \u000a    button.main{\u000a        background-color: white;\u000a        padding:20px;\u000a    }\u000a}\u000a\u000a```\u000a\u000a```html\u000a<!--project/components/coolComponent/template.html-->\u000a<span>{{i18n.hey}}</span> <strong> {{model.text }}</strong>\u000a<button class=\"main\">Message</button>\u000a```\u000a```js\u000a// project/components/coolComponent/view.js\u000a\u000a// It's a browserify module, so you can import and use node modules. \u000a// it's also compiled by the zetam.gulp task into the public directory\u000a// (public/js/components/coolComponent.js).\u000a// it's highly recommended use zetam-client module\u000a// https://www.npmjs.org/package/zetam-client\u000a\u000avar z = require('zetam-client');\u000a\u000az.registerComponent({\u000a    name:'coolComponent', \u000a    init:function () {\u000a        this.bindEvent('button.main','click','showMessage')\u000a    },\u000a    showMessage:function(){\u000a        alert('Message');\u000a    }\u000a})\u000a\u000a// This register a new componen but not create an instance.\u000a// In order to create an instance an link the instance with the \u000a// dom element is necessary run z.initDomComponents();\u000a// it's recommended run this command from the Page view.js\u000a// because it has to be run once, when the dom is ready.\u000a```\u000a\u000a Using Components\u000a-------------\u000a\u000aIn order to insert a component in a Page an HTML tag. Components can only be embedded from Pages like this:\u000a\u000a```html\u000a<div data-component=\"coolComponent\"></div>\u000a```\u000a Al the attributes added to the tag are passed to the Component controller in the first parameter.\u000a\u000a ```html \u000a<div data-component=\"coolComponent\" data-param=\"Apple rocks\"></div>\u000a```\u000a\u000aThe **data-template**  modify which template file will be used.\u000a\u000a```html\u000a<div data-component=\"coolComponent\" data-param=\"Apple rocks\" data-template=\"small\"></div>\u000a```\u000a\u000aSays to zetam: use **small.html** file instead the default **template.html**\u000a\u000aComponents special controller\u000a-------------\u000a\u000aZetam includes an special controller named **components** it allow execute components in different ways.\u000a\u000a\u000a    /components/coolComponent?data-template=small&data-param=Apple rocks\u000a\u000aExecute the component in the same way that HTML tag does, this is very useful for ajax. This doesn't include CSS or client side Javascript.\u000a\u000a    /components/coolComponent?preview=true\u000a\u000aExecute the component in a Page context and include CSS and client side logic (view.js), it's very useful in development.\u000a\u000a    /components/coolComponent/method/someMethod?text=Hi%20there\u000a\u000a    /components/coolComponent/method/someMethod?jsonString={text:'Hi there'}\u000a    \u000aExecute some method exported from the component controller (like init). This can receive regular query parameters, or an special jsonString parameter that tells to Zetam automatically parse that string and take it like params. This last option is useful for complex JSON trees. \u000a\u000aMiddleware\u000a-------------\u000a\u000a```js\u000a// app.js\u000avar z = require('zetam');\u000avar express = require('express');\u000avar app = new express();\u000a\u000aapp.use(function(req,res,next){\u000a    // this is needed for i18n\u000a    req.config.locale = 'es';\u000a    req.config.siteName = 'Example Website';\u000a    next();\u000a});\u000a\u000a// set 'public' static folder\u000aapp.use(express.static(__dirname + '/public'));\u000a\u000a// the potato\u000aapp.use(z.middleware);\u000a\u000aapp.listen(3000,function () {\u000a    console.log('running on port ' + port);\u000a});\u000a```\u000a\u000aMiddlware has several functions. The most important: routing.\u000a\u000aExample:\u000a```sh\u000aGET http://localhost:3000/myFirstPage\u000a```\u000aWill load **myFirstPage** page and execute **get** method (see https://github.com/qzapaia/zetam#pages).\u000a\u000a\u000aAlso, the middleware will transform all the pathname into an **resource** object that is passed to the page controller.\u000a\u000a```sh\u000aPOST http://localhost:3000/user/9876/post/1234\u000a```\u000aWill load **user** page, and execute **post** method (from the controller). This is how the **resource** would looks like.\u000a\u000a```js\u000a{ \u000a    name: 'user',\u000a    id: '9876',\u000a    subresource: { \u000a        name: 'post', \u000a        id: '1234' \u000a    } \u000a}\u000a```\u000a\u000a\u000aconf.globals\u000a----------\u000aAll Pages and Components receive a **conf** (first) parameter in the controller. This is a copy of req.config and also includes the **globals** object with some helpful resources:\u000a\u000a - **resource** : Object that represent the current URL\u000a - **cookies** : Cookies from the request\u000a - **query** : Query object from the URL\u000a\u000areq.config\u000a----------\u000a\u000a```js\u000a// app.js\u000avar z = require('zetam');\u000avar express = require('express');\u000avar app = new express();\u000a\u000aapp.use(function(req,res,next){\u000a    // this is needed for i18n\u000a    req.config = {\u000a        locale:'es',\u000a        siteName:'mySite'\u000a    }\u000a    next();\u000a});\u000a\u000a// set 'public' static folder\u000aapp.use(express.static(__dirname + '/public'));\u000a\u000a// the potato\u000aapp.use(z.middleware);\u000a\u000aapp.listen(3000,function () {\u000a    console.log('running on port ' + port);\u000a});\u000a```\u000a\u000areq.config object is the way to send data to all pages and components. For example **req.config.locale** is used to choice the language and render i18n.json objects inside templates. Also all the req.config is passed to the pages and components controllers like the **globals** object.\u000a\u000a## Gulp support ##\u000a\u000aZetam has a helper that automatically compile JS and CSS into the **public** directory:\u000a\u000a```js\u000a// gulpfile.js (example)\u000avar gulp = require('gulp');\u000avar z = require('zetam');\u000a\u000a// this creates a zetam task\u000az.gulp(gulp);\u000a\u000a// set the zetam task as the default\u000agulp.task('default', ['zetam']);\u000a```\u000a\u000a\u000aQuick look (example project)\u000a--------------------\u000a\u000a - **project** (main dir)\u000a     - app.js (has Express app and setup zetam middleware)\u000a     - **components**\u000a         - **header**\u000a             - controller.js - (server-side logic, create model for the template)\u000a             - i18n.js - (has i18n texts)\u000a             - template.html - (default template file, it render model that comes from the controller and i18n)\u000a             - styles.less - (has css for the component)\u000a             - view.js - (browserify module, clientside logic)\u000a     - **pages**\u000a         - **index** (home page)\u000a             - controller.js - (server side logic and model setup)\u000a             - i18n.js - (has i18n texts)\u000a             - template.html - (default template file, it render model that comes from the controller and i18n)\u000a             - bundle.less - (has css for the page and call all the components less stylesheets)\u000a             - view.js - (has the page client-side logic and call all the view.js files from components an initialize these)\u000a     - **public** (statics folder)\u000a         - **css**\u000a             - **components**\u000a                 - header.css - (compiled css from the component, is used to preview)\u000a             - **pages**\u000a                 - index.css - (compiled from bundle.less it's used from the index template)\u000a         - **js**\u000a             - **components**\u000a                 - header.js - (compiled js from the component, is used to preview)\u000a             - **pages**\u000a                 - index.js - (compiled from view.js it's used from the index template it has all the client-side logix for the page. including components initialization)\u000a         - gulpfile.js - (it use the zetam.gulp process in order to generate static assets (js and css))","bugs":{"url":"https://github.com/qzapaia/zetam/issues"},"homepage":"https://github.com/qzapaia/zetam","_id":"zetam@0.2.41","_shasum":"362dda7b68610cc131137e3b25223599a62b87b6","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"qzapaia","email":"qzapaia@gmail.com"},"maintainers":[{"name":"qzapaia","email":"qzapaia@gmail.com"}],"dist":{"shasum":"362dda7b68610cc131137e3b25223599a62b87b6","tarball":"http://registry.npmjs.org/zetam/-/zetam-0.2.41.tgz"}}: zetam
62 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:273:14)
62 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:211:65)
62 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
62 error     at Request.EventEmitter.emit (events.js:98:17)
62 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
62 error     at Request.EventEmitter.emit (events.js:117:20)
62 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
62 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
62 error     at _stream_readable.js:919:16
62 error     at process._tickCallback (node.js:419:13)
63 error If you need help, you may report this *entire* log,
63 error including the npm and node versions, at:
63 error     <http://github.com/npm/npm/issues>
64 error System Darwin 13.1.0
65 error command "node" "/usr/local/bin/npm" "publish"
66 error cwd /Users/mzapaia/src/zetam
67 error node -v v0.10.28
68 error npm -v 1.4.9
69 verbose exit [ 1, true ]
